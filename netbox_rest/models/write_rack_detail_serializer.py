# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WriteRackDetailSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, facility_id=None, site=None, group=None, tenant=None, role=None, type=None, width=None, u_height=None, comments=None):
        """
        WriteRackDetailSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'facility_id': 'str',
            'site': 'SiteNestedSerializer',
            'group': 'RackGroupNestedSerializer',
            'tenant': 'TenantNestedSerializer',
            'role': 'RackRoleNestedSerializer',
            'type': 'int',
            'width': 'int',
            'u_height': 'int',
            'comments': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'facility_id': 'facility_id',
            'site': 'site',
            'group': 'group',
            'tenant': 'tenant',
            'role': 'role',
            'type': 'type',
            'width': 'width',
            'u_height': 'u_height',
            'comments': 'comments'
        }

        self._name = name
        self._facility_id = facility_id
        self._site = site
        self._group = group
        self._tenant = tenant
        self._role = role
        self._type = type
        self._width = width
        self._u_height = u_height
        self._comments = comments


    @property
    def name(self):
        """
        Gets the name of this WriteRackDetailSerializer.


        :return: The name of this WriteRackDetailSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WriteRackDetailSerializer.


        :param name: The name of this WriteRackDetailSerializer.
        :type: str
        """

        self._name = name

    @property
    def facility_id(self):
        """
        Gets the facility_id of this WriteRackDetailSerializer.


        :return: The facility_id of this WriteRackDetailSerializer.
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """
        Sets the facility_id of this WriteRackDetailSerializer.


        :param facility_id: The facility_id of this WriteRackDetailSerializer.
        :type: str
        """

        self._facility_id = facility_id

    @property
    def site(self):
        """
        Gets the site of this WriteRackDetailSerializer.


        :return: The site of this WriteRackDetailSerializer.
        :rtype: SiteNestedSerializer
        """
        return self._site

    @site.setter
    def site(self, site):
        """
        Sets the site of this WriteRackDetailSerializer.


        :param site: The site of this WriteRackDetailSerializer.
        :type: SiteNestedSerializer
        """

        self._site = site

    @property
    def group(self):
        """
        Gets the group of this WriteRackDetailSerializer.


        :return: The group of this WriteRackDetailSerializer.
        :rtype: RackGroupNestedSerializer
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this WriteRackDetailSerializer.


        :param group: The group of this WriteRackDetailSerializer.
        :type: RackGroupNestedSerializer
        """

        self._group = group

    @property
    def tenant(self):
        """
        Gets the tenant of this WriteRackDetailSerializer.


        :return: The tenant of this WriteRackDetailSerializer.
        :rtype: TenantNestedSerializer
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """
        Sets the tenant of this WriteRackDetailSerializer.


        :param tenant: The tenant of this WriteRackDetailSerializer.
        :type: TenantNestedSerializer
        """

        self._tenant = tenant

    @property
    def role(self):
        """
        Gets the role of this WriteRackDetailSerializer.


        :return: The role of this WriteRackDetailSerializer.
        :rtype: RackRoleNestedSerializer
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this WriteRackDetailSerializer.


        :param role: The role of this WriteRackDetailSerializer.
        :type: RackRoleNestedSerializer
        """

        self._role = role

    @property
    def type(self):
        """
        Gets the type of this WriteRackDetailSerializer.


        :return: The type of this WriteRackDetailSerializer.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this WriteRackDetailSerializer.


        :param type: The type of this WriteRackDetailSerializer.
        :type: int
        """
        allowed_values = ["100", "200", "300", "1000", "1100"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def width(self):
        """
        Gets the width of this WriteRackDetailSerializer.
        Rail-to-rail width

        :return: The width of this WriteRackDetailSerializer.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this WriteRackDetailSerializer.
        Rail-to-rail width

        :param width: The width of this WriteRackDetailSerializer.
        :type: int
        """
        allowed_values = ["19", "23"]
        if width not in allowed_values:
            raise ValueError(
                "Invalid value for `width` ({0}), must be one of {1}"
                .format(width, allowed_values)
            )

        self._width = width

    @property
    def u_height(self):
        """
        Gets the u_height of this WriteRackDetailSerializer.


        :return: The u_height of this WriteRackDetailSerializer.
        :rtype: int
        """
        return self._u_height

    @u_height.setter
    def u_height(self, u_height):
        """
        Sets the u_height of this WriteRackDetailSerializer.


        :param u_height: The u_height of this WriteRackDetailSerializer.
        :type: int
        """

        if not u_height:
            raise ValueError("Invalid value for `u_height`, must not be `None`")
        if u_height > 100.0:
            raise ValueError("Invalid value for `u_height`, must be a value less than or equal to `100.0`")
        if u_height < 1.0:
            raise ValueError("Invalid value for `u_height`, must be a value greater than or equal to `1.0`")

        self._u_height = u_height

    @property
    def comments(self):
        """
        Gets the comments of this WriteRackDetailSerializer.


        :return: The comments of this WriteRackDetailSerializer.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this WriteRackDetailSerializer.


        :param comments: The comments of this WriteRackDetailSerializer.
        :type: str
        """

        self._comments = comments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
