# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AggregateSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, family=None, prefix=None, rir=None, date_added=None, description=None):
        """
        AggregateSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'family': 'int',
            'prefix': 'str',
            'rir': 'RIRNestedSerializer',
            'date_added': 'date',
            'description': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'family': 'family',
            'prefix': 'prefix',
            'rir': 'rir',
            'date_added': 'date_added',
            'description': 'description'
        }

        self._id = id
        self._family = family
        self._prefix = prefix
        self._rir = rir
        self._date_added = date_added
        self._description = description


    @property
    def id(self):
        """
        Gets the id of this AggregateSerializer.


        :return: The id of this AggregateSerializer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AggregateSerializer.


        :param id: The id of this AggregateSerializer.
        :type: int
        """

        self._id = id

    @property
    def family(self):
        """
        Gets the family of this AggregateSerializer.


        :return: The family of this AggregateSerializer.
        :rtype: int
        """
        return self._family

    @family.setter
    def family(self, family):
        """
        Sets the family of this AggregateSerializer.


        :param family: The family of this AggregateSerializer.
        :type: int
        """
        allowed_values = ["4", "6"]
        if family not in allowed_values:
            raise ValueError(
                "Invalid value for `family` ({0}), must be one of {1}"
                .format(family, allowed_values)
            )

        self._family = family

    @property
    def prefix(self):
        """
        Gets the prefix of this AggregateSerializer.


        :return: The prefix of this AggregateSerializer.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """
        Sets the prefix of this AggregateSerializer.


        :param prefix: The prefix of this AggregateSerializer.
        :type: str
        """

        self._prefix = prefix

    @property
    def rir(self):
        """
        Gets the rir of this AggregateSerializer.


        :return: The rir of this AggregateSerializer.
        :rtype: RIRNestedSerializer
        """
        return self._rir

    @rir.setter
    def rir(self, rir):
        """
        Sets the rir of this AggregateSerializer.


        :param rir: The rir of this AggregateSerializer.
        :type: RIRNestedSerializer
        """

        self._rir = rir

    @property
    def date_added(self):
        """
        Gets the date_added of this AggregateSerializer.


        :return: The date_added of this AggregateSerializer.
        :rtype: date
        """
        return self._date_added

    @date_added.setter
    def date_added(self, date_added):
        """
        Sets the date_added of this AggregateSerializer.


        :param date_added: The date_added of this AggregateSerializer.
        :type: date
        """

        self._date_added = date_added

    @property
    def description(self):
        """
        Gets the description of this AggregateSerializer.


        :return: The description of this AggregateSerializer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this AggregateSerializer.


        :param description: The description of this AggregateSerializer.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
