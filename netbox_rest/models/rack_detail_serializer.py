# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RackDetailSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, facility_id=None, display_name=None, site=None, group=None, tenant=None, role=None, type=None, width=None, u_height=None, comments=None, front_units=None, rear_units=None):
        """
        RackDetailSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'facility_id': 'str',
            'display_name': 'str',
            'site': 'SiteNestedSerializer',
            'group': 'RackGroupNestedSerializer',
            'tenant': 'TenantNestedSerializer',
            'role': 'RackRoleNestedSerializer',
            'type': 'int',
            'width': 'int',
            'u_height': 'int',
            'comments': 'str',
            'front_units': 'str',
            'rear_units': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'facility_id': 'facility_id',
            'display_name': 'display_name',
            'site': 'site',
            'group': 'group',
            'tenant': 'tenant',
            'role': 'role',
            'type': 'type',
            'width': 'width',
            'u_height': 'u_height',
            'comments': 'comments',
            'front_units': 'front_units',
            'rear_units': 'rear_units'
        }

        self._id = id
        self._name = name
        self._facility_id = facility_id
        self._display_name = display_name
        self._site = site
        self._group = group
        self._tenant = tenant
        self._role = role
        self._type = type
        self._width = width
        self._u_height = u_height
        self._comments = comments
        self._front_units = front_units
        self._rear_units = rear_units


    @property
    def id(self):
        """
        Gets the id of this RackDetailSerializer.


        :return: The id of this RackDetailSerializer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RackDetailSerializer.


        :param id: The id of this RackDetailSerializer.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this RackDetailSerializer.


        :return: The name of this RackDetailSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RackDetailSerializer.


        :param name: The name of this RackDetailSerializer.
        :type: str
        """

        self._name = name

    @property
    def facility_id(self):
        """
        Gets the facility_id of this RackDetailSerializer.


        :return: The facility_id of this RackDetailSerializer.
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """
        Sets the facility_id of this RackDetailSerializer.


        :param facility_id: The facility_id of this RackDetailSerializer.
        :type: str
        """

        self._facility_id = facility_id

    @property
    def display_name(self):
        """
        Gets the display_name of this RackDetailSerializer.


        :return: The display_name of this RackDetailSerializer.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this RackDetailSerializer.


        :param display_name: The display_name of this RackDetailSerializer.
        :type: str
        """

        self._display_name = display_name

    @property
    def site(self):
        """
        Gets the site of this RackDetailSerializer.


        :return: The site of this RackDetailSerializer.
        :rtype: SiteNestedSerializer
        """
        return self._site

    @site.setter
    def site(self, site):
        """
        Sets the site of this RackDetailSerializer.


        :param site: The site of this RackDetailSerializer.
        :type: SiteNestedSerializer
        """

        self._site = site

    @property
    def group(self):
        """
        Gets the group of this RackDetailSerializer.


        :return: The group of this RackDetailSerializer.
        :rtype: RackGroupNestedSerializer
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this RackDetailSerializer.


        :param group: The group of this RackDetailSerializer.
        :type: RackGroupNestedSerializer
        """

        self._group = group

    @property
    def tenant(self):
        """
        Gets the tenant of this RackDetailSerializer.


        :return: The tenant of this RackDetailSerializer.
        :rtype: TenantNestedSerializer
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """
        Sets the tenant of this RackDetailSerializer.


        :param tenant: The tenant of this RackDetailSerializer.
        :type: TenantNestedSerializer
        """

        self._tenant = tenant

    @property
    def role(self):
        """
        Gets the role of this RackDetailSerializer.


        :return: The role of this RackDetailSerializer.
        :rtype: RackRoleNestedSerializer
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this RackDetailSerializer.


        :param role: The role of this RackDetailSerializer.
        :type: RackRoleNestedSerializer
        """

        self._role = role

    @property
    def type(self):
        """
        Gets the type of this RackDetailSerializer.


        :return: The type of this RackDetailSerializer.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RackDetailSerializer.


        :param type: The type of this RackDetailSerializer.
        :type: int
        """
        allowed_values = ["100", "200", "300", "1000", "1100"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def width(self):
        """
        Gets the width of this RackDetailSerializer.
        Rail-to-rail width

        :return: The width of this RackDetailSerializer.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this RackDetailSerializer.
        Rail-to-rail width

        :param width: The width of this RackDetailSerializer.
        :type: int
        """
        allowed_values = ["19", "23"]
        if width not in allowed_values:
            raise ValueError(
                "Invalid value for `width` ({0}), must be one of {1}"
                .format(width, allowed_values)
            )

        self._width = width

    @property
    def u_height(self):
        """
        Gets the u_height of this RackDetailSerializer.


        :return: The u_height of this RackDetailSerializer.
        :rtype: int
        """
        return self._u_height

    @u_height.setter
    def u_height(self, u_height):
        """
        Sets the u_height of this RackDetailSerializer.


        :param u_height: The u_height of this RackDetailSerializer.
        :type: int
        """

        if not u_height:
            raise ValueError("Invalid value for `u_height`, must not be `None`")
        if u_height > 100.0:
            raise ValueError("Invalid value for `u_height`, must be a value less than or equal to `100.0`")
        if u_height < 1.0:
            raise ValueError("Invalid value for `u_height`, must be a value greater than or equal to `1.0`")

        self._u_height = u_height

    @property
    def comments(self):
        """
        Gets the comments of this RackDetailSerializer.


        :return: The comments of this RackDetailSerializer.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this RackDetailSerializer.


        :param comments: The comments of this RackDetailSerializer.
        :type: str
        """

        self._comments = comments

    @property
    def front_units(self):
        """
        Gets the front_units of this RackDetailSerializer.


        :return: The front_units of this RackDetailSerializer.
        :rtype: str
        """
        return self._front_units

    @front_units.setter
    def front_units(self, front_units):
        """
        Sets the front_units of this RackDetailSerializer.


        :param front_units: The front_units of this RackDetailSerializer.
        :type: str
        """

        self._front_units = front_units

    @property
    def rear_units(self):
        """
        Gets the rear_units of this RackDetailSerializer.


        :return: The rear_units of this RackDetailSerializer.
        :rtype: str
        """
        return self._rear_units

    @rear_units.setter
    def rear_units(self, rear_units):
        """
        Sets the rear_units of this RackDetailSerializer.


        :param rear_units: The rear_units of this RackDetailSerializer.
        :type: str
        """

        self._rear_units = rear_units

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
