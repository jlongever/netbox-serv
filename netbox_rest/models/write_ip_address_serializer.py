# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WriteIPAddressSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, address=None, vrf=None, tenant=None, interface=None, description=None, nat_inside=None, nat_outside=None):
        """
        WriteIPAddressSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'str',
            'vrf': 'VRFTenantSerializer',
            'tenant': 'TenantNestedSerializer',
            'interface': 'InterfaceNestedSerializer',
            'description': 'str',
            'nat_inside': 'IPAddressNestedSerializer',
            'nat_outside': 'IPAddressNestedSerializer'
        }

        self.attribute_map = {
            'address': 'address',
            'vrf': 'vrf',
            'tenant': 'tenant',
            'interface': 'interface',
            'description': 'description',
            'nat_inside': 'nat_inside',
            'nat_outside': 'nat_outside'
        }

        self._address = address
        self._vrf = vrf
        self._tenant = tenant
        self._interface = interface
        self._description = description
        self._nat_inside = nat_inside
        self._nat_outside = nat_outside


    @property
    def address(self):
        """
        Gets the address of this WriteIPAddressSerializer.


        :return: The address of this WriteIPAddressSerializer.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this WriteIPAddressSerializer.


        :param address: The address of this WriteIPAddressSerializer.
        :type: str
        """

        self._address = address

    @property
    def vrf(self):
        """
        Gets the vrf of this WriteIPAddressSerializer.


        :return: The vrf of this WriteIPAddressSerializer.
        :rtype: VRFTenantSerializer
        """
        return self._vrf

    @vrf.setter
    def vrf(self, vrf):
        """
        Sets the vrf of this WriteIPAddressSerializer.


        :param vrf: The vrf of this WriteIPAddressSerializer.
        :type: VRFTenantSerializer
        """

        self._vrf = vrf

    @property
    def tenant(self):
        """
        Gets the tenant of this WriteIPAddressSerializer.


        :return: The tenant of this WriteIPAddressSerializer.
        :rtype: TenantNestedSerializer
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """
        Sets the tenant of this WriteIPAddressSerializer.


        :param tenant: The tenant of this WriteIPAddressSerializer.
        :type: TenantNestedSerializer
        """

        self._tenant = tenant

    @property
    def interface(self):
        """
        Gets the interface of this WriteIPAddressSerializer.


        :return: The interface of this WriteIPAddressSerializer.
        :rtype: InterfaceNestedSerializer
        """
        return self._interface

    @interface.setter
    def interface(self, interface):
        """
        Sets the interface of this WriteIPAddressSerializer.


        :param interface: The interface of this WriteIPAddressSerializer.
        :type: InterfaceNestedSerializer
        """

        self._interface = interface

    @property
    def description(self):
        """
        Gets the description of this WriteIPAddressSerializer.


        :return: The description of this WriteIPAddressSerializer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WriteIPAddressSerializer.


        :param description: The description of this WriteIPAddressSerializer.
        :type: str
        """

        self._description = description

    @property
    def nat_inside(self):
        """
        Gets the nat_inside of this WriteIPAddressSerializer.


        :return: The nat_inside of this WriteIPAddressSerializer.
        :rtype: IPAddressNestedSerializer
        """
        return self._nat_inside

    @nat_inside.setter
    def nat_inside(self, nat_inside):
        """
        Sets the nat_inside of this WriteIPAddressSerializer.


        :param nat_inside: The nat_inside of this WriteIPAddressSerializer.
        :type: IPAddressNestedSerializer
        """

        self._nat_inside = nat_inside

    @property
    def nat_outside(self):
        """
        Gets the nat_outside of this WriteIPAddressSerializer.


        :return: The nat_outside of this WriteIPAddressSerializer.
        :rtype: IPAddressNestedSerializer
        """
        return self._nat_outside

    @nat_outside.setter
    def nat_outside(self, nat_outside):
        """
        Sets the nat_outside of this WriteIPAddressSerializer.


        :param nat_outside: The nat_outside of this WriteIPAddressSerializer.
        :type: IPAddressNestedSerializer
        """

        self._nat_outside = nat_outside

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
