# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WriteInterfaceTemplateNestedSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, form_factor=None, mgmt_only=None):
        """
        WriteInterfaceTemplateNestedSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'form_factor': 'int',
            'mgmt_only': 'bool'
        }

        self.attribute_map = {
            'name': 'name',
            'form_factor': 'form_factor',
            'mgmt_only': 'mgmt_only'
        }

        self._name = name
        self._form_factor = form_factor
        self._mgmt_only = mgmt_only


    @property
    def name(self):
        """
        Gets the name of this WriteInterfaceTemplateNestedSerializer.


        :return: The name of this WriteInterfaceTemplateNestedSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WriteInterfaceTemplateNestedSerializer.


        :param name: The name of this WriteInterfaceTemplateNestedSerializer.
        :type: str
        """

        self._name = name

    @property
    def form_factor(self):
        """
        Gets the form_factor of this WriteInterfaceTemplateNestedSerializer.


        :return: The form_factor of this WriteInterfaceTemplateNestedSerializer.
        :rtype: int
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """
        Sets the form_factor of this WriteInterfaceTemplateNestedSerializer.


        :param form_factor: The form_factor of this WriteInterfaceTemplateNestedSerializer.
        :type: int
        """
        allowed_values = ["0", "800", "1000", "1150", "1050", "1100", "1300", "1200", "1400", "1500", "1600", "4000", "4010", "4040", "4050", "5000", "5050"]
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor

    @property
    def mgmt_only(self):
        """
        Gets the mgmt_only of this WriteInterfaceTemplateNestedSerializer.


        :return: The mgmt_only of this WriteInterfaceTemplateNestedSerializer.
        :rtype: bool
        """
        return self._mgmt_only

    @mgmt_only.setter
    def mgmt_only(self, mgmt_only):
        """
        Sets the mgmt_only of this WriteInterfaceTemplateNestedSerializer.


        :param mgmt_only: The mgmt_only of this WriteInterfaceTemplateNestedSerializer.
        :type: bool
        """

        self._mgmt_only = mgmt_only

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
