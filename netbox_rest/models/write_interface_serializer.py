# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WriteInterfaceSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, device=None, name=None, mac_address=None, mgmt_only=None, description=None):
        """
        WriteInterfaceSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device': 'DeviceNestedSerializer',
            'name': 'str',
            'mac_address': 'str',
            'mgmt_only': 'bool',
            'description': 'str'
        }

        self.attribute_map = {
            'device': 'device',
            'name': 'name',
            'mac_address': 'mac_address',
            'mgmt_only': 'mgmt_only',
            'description': 'description'
        }

        self._device = device
        self._name = name
        self._mac_address = mac_address
        self._mgmt_only = mgmt_only
        self._description = description


    @property
    def device(self):
        """
        Gets the device of this WriteInterfaceSerializer.


        :return: The device of this WriteInterfaceSerializer.
        :rtype: DeviceNestedSerializer
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this WriteInterfaceSerializer.


        :param device: The device of this WriteInterfaceSerializer.
        :type: DeviceNestedSerializer
        """

        self._device = device

    @property
    def name(self):
        """
        Gets the name of this WriteInterfaceSerializer.


        :return: The name of this WriteInterfaceSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WriteInterfaceSerializer.


        :param name: The name of this WriteInterfaceSerializer.
        :type: str
        """

        self._name = name

    @property
    def mac_address(self):
        """
        Gets the mac_address of this WriteInterfaceSerializer.


        :return: The mac_address of this WriteInterfaceSerializer.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this WriteInterfaceSerializer.


        :param mac_address: The mac_address of this WriteInterfaceSerializer.
        :type: str
        """

        self._mac_address = mac_address

    @property
    def mgmt_only(self):
        """
        Gets the mgmt_only of this WriteInterfaceSerializer.
        This interface is used only for out-of-band management

        :return: The mgmt_only of this WriteInterfaceSerializer.
        :rtype: bool
        """
        return self._mgmt_only

    @mgmt_only.setter
    def mgmt_only(self, mgmt_only):
        """
        Sets the mgmt_only of this WriteInterfaceSerializer.
        This interface is used only for out-of-band management

        :param mgmt_only: The mgmt_only of this WriteInterfaceSerializer.
        :type: bool
        """

        self._mgmt_only = mgmt_only

    @property
    def description(self):
        """
        Gets the description of this WriteInterfaceSerializer.


        :return: The description of this WriteInterfaceSerializer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WriteInterfaceSerializer.


        :param description: The description of this WriteInterfaceSerializer.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
