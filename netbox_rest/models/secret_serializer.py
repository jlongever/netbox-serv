# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SecretSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, device=None, role=None, name=None, plaintext=None, hash=None, created=None, last_updated=None):
        """
        SecretSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'device': 'SecretDeviceSerializer',
            'role': 'SecretRoleNestedSerializer',
            'name': 'str',
            'plaintext': 'str',
            'hash': 'str',
            'created': 'date',
            'last_updated': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'device': 'device',
            'role': 'role',
            'name': 'name',
            'plaintext': 'plaintext',
            'hash': 'hash',
            'created': 'created',
            'last_updated': 'last_updated'
        }

        self._id = id
        self._device = device
        self._role = role
        self._name = name
        self._plaintext = plaintext
        self._hash = hash
        self._created = created
        self._last_updated = last_updated


    @property
    def id(self):
        """
        Gets the id of this SecretSerializer.


        :return: The id of this SecretSerializer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SecretSerializer.


        :param id: The id of this SecretSerializer.
        :type: int
        """

        self._id = id

    @property
    def device(self):
        """
        Gets the device of this SecretSerializer.


        :return: The device of this SecretSerializer.
        :rtype: SecretDeviceSerializer
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this SecretSerializer.


        :param device: The device of this SecretSerializer.
        :type: SecretDeviceSerializer
        """

        self._device = device

    @property
    def role(self):
        """
        Gets the role of this SecretSerializer.


        :return: The role of this SecretSerializer.
        :rtype: SecretRoleNestedSerializer
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this SecretSerializer.


        :param role: The role of this SecretSerializer.
        :type: SecretRoleNestedSerializer
        """

        self._role = role

    @property
    def name(self):
        """
        Gets the name of this SecretSerializer.


        :return: The name of this SecretSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SecretSerializer.


        :param name: The name of this SecretSerializer.
        :type: str
        """

        self._name = name

    @property
    def plaintext(self):
        """
        Gets the plaintext of this SecretSerializer.


        :return: The plaintext of this SecretSerializer.
        :rtype: str
        """
        return self._plaintext

    @plaintext.setter
    def plaintext(self, plaintext):
        """
        Sets the plaintext of this SecretSerializer.


        :param plaintext: The plaintext of this SecretSerializer.
        :type: str
        """

        self._plaintext = plaintext

    @property
    def hash(self):
        """
        Gets the hash of this SecretSerializer.


        :return: The hash of this SecretSerializer.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """
        Sets the hash of this SecretSerializer.


        :param hash: The hash of this SecretSerializer.
        :type: str
        """

        self._hash = hash

    @property
    def created(self):
        """
        Gets the created of this SecretSerializer.


        :return: The created of this SecretSerializer.
        :rtype: date
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this SecretSerializer.


        :param created: The created of this SecretSerializer.
        :type: date
        """

        self._created = created

    @property
    def last_updated(self):
        """
        Gets the last_updated of this SecretSerializer.


        :return: The last_updated of this SecretSerializer.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """
        Sets the last_updated of this SecretSerializer.


        :param last_updated: The last_updated of this SecretSerializer.
        :type: datetime
        """

        self._last_updated = last_updated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
