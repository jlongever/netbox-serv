# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ApiipamApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def aggregate_detail_get(self, pk, **kwargs):
        """
        Retrieve a single aggregate
        <p>Retrieve a single aggregate</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.aggregate_detail_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: AggregateSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.aggregate_detail_get_with_http_info(pk, **kwargs)
        else:
            (data) = self.aggregate_detail_get_with_http_info(pk, **kwargs)
            return data

    def aggregate_detail_get_with_http_info(self, pk, **kwargs):
        """
        Retrieve a single aggregate
        <p>Retrieve a single aggregate</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.aggregate_detail_get_with_http_info(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: AggregateSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aggregate_detail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `aggregate_detail_get`")

        resource_path = '/api/ipam/aggregates/{pk}/'.replace('{format}', 'json')
        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AggregateSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def aggregate_list_get(self, **kwargs):
        """
        List aggregates (filterable)
        <p>List aggregates (filterable)</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.aggregate_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Object family: Family
        :param str rir_id: RIR (ID)
        :param str rir: RIR (slug)
        :param str date_added: Date added
        :param str q: Search
        :return: AggregateSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.aggregate_list_get_with_http_info(**kwargs)
        else:
            (data) = self.aggregate_list_get_with_http_info(**kwargs)
            return data

    def aggregate_list_get_with_http_info(self, **kwargs):
        """
        List aggregates (filterable)
        <p>List aggregates (filterable)</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.aggregate_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Object family: Family
        :param str rir_id: RIR (ID)
        :param str rir: RIR (slug)
        :param str date_added: Date added
        :param str q: Search
        :return: AggregateSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['family', 'rir_id', 'rir', 'date_added', 'q']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aggregate_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/ipam/aggregates/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'family' in params:
            query_params['family'] = params['family']
        if 'rir_id' in params:
            query_params['rir_id'] = params['rir_id']
        if 'rir' in params:
            query_params['rir'] = params['rir']
        if 'date_added' in params:
            query_params['date_added'] = params['date_added']
        if 'q' in params:
            query_params['q'] = params['q']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AggregateSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def ip_address_detail_get(self, pk, **kwargs):
        """
        Retrieve a single IP address
        <p>Retrieve a single IP address</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ip_address_detail_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: IPAddressSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ip_address_detail_get_with_http_info(pk, **kwargs)
        else:
            (data) = self.ip_address_detail_get_with_http_info(pk, **kwargs)
            return data

    def ip_address_detail_get_with_http_info(self, pk, **kwargs):
        """
        Retrieve a single IP address
        <p>Retrieve a single IP address</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ip_address_detail_get_with_http_info(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: IPAddressSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ip_address_detail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `ip_address_detail_get`")

        resource_path = '/api/ipam/ip-addresses/{pk}/'.replace('{format}', 'json')
        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='IPAddressSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def ip_address_list_get(self, **kwargs):
        """
        List IP addresses (filterable)
        <p>List IP addresses (filterable)</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ip_address_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: Search
        :param Object family: Family
        :param str vrf_id: VRF
        :param str vrf: VRF
        :param str device_id: Device (ID)
        :param str device: Device (name)
        :param str interface_id: Interface (ID)
        :param str parent: Parent prefix
        :param str tenant_id: Tenant (ID)
        :param str tenant: Tenant
        :return: IPAddressSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.ip_address_list_get_with_http_info(**kwargs)
        else:
            (data) = self.ip_address_list_get_with_http_info(**kwargs)
            return data

    def ip_address_list_get_with_http_info(self, **kwargs):
        """
        List IP addresses (filterable)
        <p>List IP addresses (filterable)</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ip_address_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: Search
        :param Object family: Family
        :param str vrf_id: VRF
        :param str vrf: VRF
        :param str device_id: Device (ID)
        :param str device: Device (name)
        :param str interface_id: Interface (ID)
        :param str parent: Parent prefix
        :param str tenant_id: Tenant (ID)
        :param str tenant: Tenant
        :return: IPAddressSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'family', 'vrf_id', 'vrf', 'device_id', 'device', 'interface_id', 'parent', 'tenant_id', 'tenant']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ip_address_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/ipam/ip-addresses/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'q' in params:
            query_params['q'] = params['q']
        if 'family' in params:
            query_params['family'] = params['family']
        if 'vrf_id' in params:
            query_params['vrf_id'] = params['vrf_id']
        if 'vrf' in params:
            query_params['vrf'] = params['vrf']
        if 'device_id' in params:
            query_params['device_id'] = params['device_id']
        if 'device' in params:
            query_params['device'] = params['device']
        if 'interface_id' in params:
            query_params['interface_id'] = params['interface_id']
        if 'parent' in params:
            query_params['parent'] = params['parent']
        if 'tenant_id' in params:
            query_params['tenant_id'] = params['tenant_id']
        if 'tenant' in params:
            query_params['tenant'] = params['tenant']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='IPAddressSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def prefix_detail_get(self, pk, **kwargs):
        """
        Retrieve a single prefix
        <p>Retrieve a single prefix</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.prefix_detail_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: PrefixSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.prefix_detail_get_with_http_info(pk, **kwargs)
        else:
            (data) = self.prefix_detail_get_with_http_info(pk, **kwargs)
            return data

    def prefix_detail_get_with_http_info(self, pk, **kwargs):
        """
        Retrieve a single prefix
        <p>Retrieve a single prefix</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.prefix_detail_get_with_http_info(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: PrefixSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prefix_detail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `prefix_detail_get`")

        resource_path = '/api/ipam/prefixes/{pk}/'.replace('{format}', 'json')
        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PrefixSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def prefix_list_get(self, **kwargs):
        """
        List prefixes (filterable)
        <p>List prefixes (filterable)</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.prefix_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Object family: Family
        :param str site_id: Site (ID)
        :param str site: Site (slug)
        :param str vrf: VRF
        :param str vrf_id: VRF
        :param str vlan_id: VLAN (ID)
        :param str vlan_vid: VLAN number (1-4095)
        :param Object status: Status
        :param str role_id: Role (ID)
        :param str role: Role (slug)
        :param str q: Search
        :param str parent: Parent prefix
        :param str tenant_id: Tenant (ID)
        :param str tenant: Tenant
        :return: PrefixSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.prefix_list_get_with_http_info(**kwargs)
        else:
            (data) = self.prefix_list_get_with_http_info(**kwargs)
            return data

    def prefix_list_get_with_http_info(self, **kwargs):
        """
        List prefixes (filterable)
        <p>List prefixes (filterable)</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.prefix_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Object family: Family
        :param str site_id: Site (ID)
        :param str site: Site (slug)
        :param str vrf: VRF
        :param str vrf_id: VRF
        :param str vlan_id: VLAN (ID)
        :param str vlan_vid: VLAN number (1-4095)
        :param Object status: Status
        :param str role_id: Role (ID)
        :param str role: Role (slug)
        :param str q: Search
        :param str parent: Parent prefix
        :param str tenant_id: Tenant (ID)
        :param str tenant: Tenant
        :return: PrefixSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['family', 'site_id', 'site', 'vrf', 'vrf_id', 'vlan_id', 'vlan_vid', 'status', 'role_id', 'role', 'q', 'parent', 'tenant_id', 'tenant']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prefix_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/ipam/prefixes/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'family' in params:
            query_params['family'] = params['family']
        if 'site_id' in params:
            query_params['site_id'] = params['site_id']
        if 'site' in params:
            query_params['site'] = params['site']
        if 'vrf' in params:
            query_params['vrf'] = params['vrf']
        if 'vrf_id' in params:
            query_params['vrf_id'] = params['vrf_id']
        if 'vlan_id' in params:
            query_params['vlan_id'] = params['vlan_id']
        if 'vlan_vid' in params:
            query_params['vlan_vid'] = params['vlan_vid']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'role_id' in params:
            query_params['role_id'] = params['role_id']
        if 'role' in params:
            query_params['role'] = params['role']
        if 'q' in params:
            query_params['q'] = params['q']
        if 'parent' in params:
            query_params['parent'] = params['parent']
        if 'tenant_id' in params:
            query_params['tenant_id'] = params['tenant_id']
        if 'tenant' in params:
            query_params['tenant'] = params['tenant']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PrefixSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def rir_detail_get(self, pk, **kwargs):
        """
        Retrieve a single RIR
        <p>Retrieve a single RIR</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rir_detail_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: RIRSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.rir_detail_get_with_http_info(pk, **kwargs)
        else:
            (data) = self.rir_detail_get_with_http_info(pk, **kwargs)
            return data

    def rir_detail_get_with_http_info(self, pk, **kwargs):
        """
        Retrieve a single RIR
        <p>Retrieve a single RIR</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rir_detail_get_with_http_info(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: RIRSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rir_detail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `rir_detail_get`")

        resource_path = '/api/ipam/rirs/{pk}/'.replace('{format}', 'json')
        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RIRSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def rir_list_get(self, **kwargs):
        """
        List all RIRs
        <p>List all RIRs</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rir_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: RIRSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.rir_list_get_with_http_info(**kwargs)
        else:
            (data) = self.rir_list_get_with_http_info(**kwargs)
            return data

    def rir_list_get_with_http_info(self, **kwargs):
        """
        List all RIRs
        <p>List all RIRs</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rir_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: RIRSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rir_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/ipam/rirs/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RIRSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def role_detail_get(self, pk, **kwargs):
        """
        Retrieve a single role
        <p>Retrieve a single role</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.role_detail_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: RoleSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.role_detail_get_with_http_info(pk, **kwargs)
        else:
            (data) = self.role_detail_get_with_http_info(pk, **kwargs)
            return data

    def role_detail_get_with_http_info(self, pk, **kwargs):
        """
        Retrieve a single role
        <p>Retrieve a single role</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.role_detail_get_with_http_info(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: RoleSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_detail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `role_detail_get`")

        resource_path = '/api/ipam/roles/{pk}/'.replace('{format}', 'json')
        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RoleSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def role_list_get(self, **kwargs):
        """
        List all roles
        <p>List all roles</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.role_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: RoleSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.role_list_get_with_http_info(**kwargs)
        else:
            (data) = self.role_list_get_with_http_info(**kwargs)
            return data

    def role_list_get_with_http_info(self, **kwargs):
        """
        List all roles
        <p>List all roles</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.role_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: RoleSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/ipam/roles/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RoleSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def vlan_detail_get(self, pk, **kwargs):
        """
        Retrieve a single VLAN
        <p>Retrieve a single VLAN</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vlan_detail_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: VLANSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.vlan_detail_get_with_http_info(pk, **kwargs)
        else:
            (data) = self.vlan_detail_get_with_http_info(pk, **kwargs)
            return data

    def vlan_detail_get_with_http_info(self, pk, **kwargs):
        """
        Retrieve a single VLAN
        <p>Retrieve a single VLAN</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vlan_detail_get_with_http_info(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: VLANSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vlan_detail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `vlan_detail_get`")

        resource_path = '/api/ipam/vlans/{pk}/'.replace('{format}', 'json')
        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VLANSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def vlan_group_detail_get(self, pk, **kwargs):
        """
        Retrieve a single VLAN group
        <p>Retrieve a single VLAN group</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vlan_group_detail_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: VLANGroupSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.vlan_group_detail_get_with_http_info(pk, **kwargs)
        else:
            (data) = self.vlan_group_detail_get_with_http_info(pk, **kwargs)
            return data

    def vlan_group_detail_get_with_http_info(self, pk, **kwargs):
        """
        Retrieve a single VLAN group
        <p>Retrieve a single VLAN group</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vlan_group_detail_get_with_http_info(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: VLANGroupSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vlan_group_detail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `vlan_group_detail_get`")

        resource_path = '/api/ipam/vlan-groups/{pk}/'.replace('{format}', 'json')
        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VLANGroupSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def vlan_group_list_get(self, **kwargs):
        """
        List all VLAN groups
        <p>List all VLAN groups</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vlan_group_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: Site (ID)
        :param str site: Site (slug)
        :return: VLANGroupSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.vlan_group_list_get_with_http_info(**kwargs)
        else:
            (data) = self.vlan_group_list_get_with_http_info(**kwargs)
            return data

    def vlan_group_list_get_with_http_info(self, **kwargs):
        """
        List all VLAN groups
        <p>List all VLAN groups</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vlan_group_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: Site (ID)
        :param str site: Site (slug)
        :return: VLANGroupSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'site']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vlan_group_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/ipam/vlan-groups/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'site_id' in params:
            query_params['site_id'] = params['site_id']
        if 'site' in params:
            query_params['site'] = params['site']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VLANGroupSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def vlan_list_get(self, **kwargs):
        """
        List VLANs (filterable)
        <p>List VLANs (filterable)</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vlan_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: Site (ID)
        :param str site: Site (slug)
        :param str vid: VLAN number (1-4095)
        :param str name: Name
        :param Object status: Status
        :param str role_id: Role (ID)
        :param str role: Role (slug)
        :param str q: Search
        :param str group_id: Group (ID)
        :param str group: Group
        :param str tenant_id: Tenant (ID)
        :param str tenant: Tenant (slug)
        :return: VLANSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.vlan_list_get_with_http_info(**kwargs)
        else:
            (data) = self.vlan_list_get_with_http_info(**kwargs)
            return data

    def vlan_list_get_with_http_info(self, **kwargs):
        """
        List VLANs (filterable)
        <p>List VLANs (filterable)</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vlan_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str site_id: Site (ID)
        :param str site: Site (slug)
        :param str vid: VLAN number (1-4095)
        :param str name: Name
        :param Object status: Status
        :param str role_id: Role (ID)
        :param str role: Role (slug)
        :param str q: Search
        :param str group_id: Group (ID)
        :param str group: Group
        :param str tenant_id: Tenant (ID)
        :param str tenant: Tenant (slug)
        :return: VLANSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'site', 'vid', 'name', 'status', 'role_id', 'role', 'q', 'group_id', 'group', 'tenant_id', 'tenant']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vlan_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/ipam/vlans/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'site_id' in params:
            query_params['site_id'] = params['site_id']
        if 'site' in params:
            query_params['site'] = params['site']
        if 'vid' in params:
            query_params['vid'] = params['vid']
        if 'name' in params:
            query_params['name'] = params['name']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'role_id' in params:
            query_params['role_id'] = params['role_id']
        if 'role' in params:
            query_params['role'] = params['role']
        if 'q' in params:
            query_params['q'] = params['q']
        if 'group_id' in params:
            query_params['group_id'] = params['group_id']
        if 'group' in params:
            query_params['group'] = params['group']
        if 'tenant_id' in params:
            query_params['tenant_id'] = params['tenant_id']
        if 'tenant' in params:
            query_params['tenant'] = params['tenant']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VLANSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def vrf_detail_get(self, pk, **kwargs):
        """
        Retrieve a single VRF
        <p>Retrieve a single VRF</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vrf_detail_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: VRFSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.vrf_detail_get_with_http_info(pk, **kwargs)
        else:
            (data) = self.vrf_detail_get_with_http_info(pk, **kwargs)
            return data

    def vrf_detail_get_with_http_info(self, pk, **kwargs):
        """
        Retrieve a single VRF
        <p>Retrieve a single VRF</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vrf_detail_get_with_http_info(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: VRFSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vrf_detail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `vrf_detail_get`")

        resource_path = '/api/ipam/vrfs/{pk}/'.replace('{format}', 'json')
        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VRFSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def vrf_list_get(self, **kwargs):
        """
        List all VRFs
        <p>List all VRFs</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vrf_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Name
        :param str rd: Route distinguisher
        :param str q: Search
        :param str tenant_id: Tenant (ID)
        :param str tenant: Tenant (slug)
        :return: VRFSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.vrf_list_get_with_http_info(**kwargs)
        else:
            (data) = self.vrf_list_get_with_http_info(**kwargs)
            return data

    def vrf_list_get_with_http_info(self, **kwargs):
        """
        List all VRFs
        <p>List all VRFs</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vrf_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Name
        :param str rd: Route distinguisher
        :param str q: Search
        :param str tenant_id: Tenant (ID)
        :param str tenant: Tenant (slug)
        :return: VRFSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'rd', 'q', 'tenant_id', 'tenant']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vrf_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/ipam/vrfs/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'name' in params:
            query_params['name'] = params['name']
        if 'rd' in params:
            query_params['rd'] = params['rd']
        if 'q' in params:
            query_params['q'] = params['q']
        if 'tenant_id' in params:
            query_params['tenant_id'] = params['tenant_id']
        if 'tenant' in params:
            query_params['tenant'] = params['tenant']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VRFSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
