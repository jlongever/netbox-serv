# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ApisecretsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def rsa_key_generator_get(self, **kwargs):
        """
        Generate a new RSA key pair for a user
        <p>Generate a new RSA key pair for a user. Authenticated because it's a ripe avenue for DoS.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rsa_key_generator_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.rsa_key_generator_get_with_http_info(**kwargs)
        else:
            (data) = self.rsa_key_generator_get_with_http_info(**kwargs)
            return data

    def rsa_key_generator_get_with_http_info(self, **kwargs):
        """
        Generate a new RSA key pair for a user
        <p>Generate a new RSA key pair for a user. Authenticated because it's a ripe avenue for DoS.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rsa_key_generator_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rsa_key_generator_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/secrets/generate-keys/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def secret_detail_get(self, pk, **kwargs):
        """
        Retrieve a single Secret
        <p>Retrieve a single Secret. If a private key is POSTed, attempt to decrypt the Secret.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.secret_detail_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: SecretSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.secret_detail_get_with_http_info(pk, **kwargs)
        else:
            (data) = self.secret_detail_get_with_http_info(pk, **kwargs)
            return data

    def secret_detail_get_with_http_info(self, pk, **kwargs):
        """
        Retrieve a single Secret
        <p>Retrieve a single Secret. If a private key is POSTed, attempt to decrypt the Secret.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.secret_detail_get_with_http_info(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: SecretSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secret_detail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `secret_detail_get`")

        resource_path = '/api/secrets/secrets/{pk}/'.replace('{format}', 'json')
        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SecretSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def secret_detail_post(self, pk, device, role, name, **kwargs):
        """
        Retrieve a single Secret
        <p>Retrieve a single Secret. If a private key is POSTed, attempt to decrypt the Secret.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.secret_detail_post(pk, device, role, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str device:  (required)
        :param str role:  (required)
        :param str name:  (required)
        :return: SecretSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.secret_detail_post_with_http_info(pk, device, role, name, **kwargs)
        else:
            (data) = self.secret_detail_post_with_http_info(pk, device, role, name, **kwargs)
            return data

    def secret_detail_post_with_http_info(self, pk, device, role, name, **kwargs):
        """
        Retrieve a single Secret
        <p>Retrieve a single Secret. If a private key is POSTed, attempt to decrypt the Secret.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.secret_detail_post_with_http_info(pk, device, role, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :param str device:  (required)
        :param str role:  (required)
        :param str name:  (required)
        :return: SecretSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk', 'device', 'role', 'name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secret_detail_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `secret_detail_post`")
        # verify the required parameter 'device' is set
        if ('device' not in params) or (params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `secret_detail_post`")
        # verify the required parameter 'role' is set
        if ('role' not in params) or (params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `secret_detail_post`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `secret_detail_post`")

        resource_path = '/api/secrets/secrets/{pk}/'.replace('{format}', 'json')
        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'device' in params:
            form_params.append(('device', params['device']))
        if 'role' in params:
            form_params.append(('role', params['role']))
        if 'name' in params:
            form_params.append(('name', params['name']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SecretSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def secret_list_get(self, **kwargs):
        """
        List secrets (filterable)
        <p>List secrets (filterable). If a private key is POSTed, attempt to decrypt each Secret.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.secret_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Name
        :param str role_id: Role (ID)
        :param str role: Role (slug)
        :param str device: Device (Name)
        :param str q: Search
        :return: SecretSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.secret_list_get_with_http_info(**kwargs)
        else:
            (data) = self.secret_list_get_with_http_info(**kwargs)
            return data

    def secret_list_get_with_http_info(self, **kwargs):
        """
        List secrets (filterable)
        <p>List secrets (filterable). If a private key is POSTed, attempt to decrypt each Secret.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.secret_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Name
        :param str role_id: Role (ID)
        :param str role: Role (slug)
        :param str device: Device (Name)
        :param str q: Search
        :return: SecretSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'role_id', 'role', 'device', 'q']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secret_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/secrets/secrets/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'name' in params:
            query_params['name'] = params['name']
        if 'role_id' in params:
            query_params['role_id'] = params['role_id']
        if 'role' in params:
            query_params['role'] = params['role']
        if 'device' in params:
            query_params['device'] = params['device']
        if 'q' in params:
            query_params['q'] = params['q']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SecretSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def secret_list_post(self, device, role, name, **kwargs):
        """
        List secrets (filterable)
        <p>List secrets (filterable). If a private key is POSTed, attempt to decrypt each Secret.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.secret_list_post(device, role, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device:  (required)
        :param str role:  (required)
        :param str name:  (required)
        :param str name2: Name
        :param str role_id: Role (ID)
        :param str role2: Role (slug)
        :param str device2: Device (Name)
        :param str q: Search
        :return: SecretSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.secret_list_post_with_http_info(device, role, name, **kwargs)
        else:
            (data) = self.secret_list_post_with_http_info(device, role, name, **kwargs)
            return data

    def secret_list_post_with_http_info(self, device, role, name, **kwargs):
        """
        List secrets (filterable)
        <p>List secrets (filterable). If a private key is POSTed, attempt to decrypt each Secret.</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.secret_list_post_with_http_info(device, role, name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str device:  (required)
        :param str role:  (required)
        :param str name:  (required)
        :param str name2: Name
        :param str role_id: Role (ID)
        :param str role2: Role (slug)
        :param str device2: Device (Name)
        :param str q: Search
        :return: SecretSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device', 'role', 'name', 'name2', 'role_id', 'role2', 'device2', 'q']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secret_list_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device' is set
        if ('device' not in params) or (params['device'] is None):
            raise ValueError("Missing the required parameter `device` when calling `secret_list_post`")
        # verify the required parameter 'role' is set
        if ('role' not in params) or (params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `secret_list_post`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `secret_list_post`")

        resource_path = '/api/secrets/secrets/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'name2' in params:
            query_params['name'] = params['name2']
        if 'role_id' in params:
            query_params['role_id'] = params['role_id']
        if 'role2' in params:
            query_params['role'] = params['role2']
        if 'device2' in params:
            query_params['device'] = params['device2']
        if 'q' in params:
            query_params['q'] = params['q']

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'device' in params:
            form_params.append(('device', params['device']))
        if 'role' in params:
            form_params.append(('role', params['role']))
        if 'name' in params:
            form_params.append(('name', params['name']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SecretSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def secret_role_detail_get(self, pk, **kwargs):
        """
        Retrieve a single secret role
        <p>Retrieve a single secret role</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.secret_role_detail_get(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: SecretRoleSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.secret_role_detail_get_with_http_info(pk, **kwargs)
        else:
            (data) = self.secret_role_detail_get_with_http_info(pk, **kwargs)
            return data

    def secret_role_detail_get_with_http_info(self, pk, **kwargs):
        """
        Retrieve a single secret role
        <p>Retrieve a single secret role</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.secret_role_detail_get_with_http_info(pk, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str pk:  (required)
        :return: SecretRoleSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pk']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secret_role_detail_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pk' is set
        if ('pk' not in params) or (params['pk'] is None):
            raise ValueError("Missing the required parameter `pk` when calling `secret_role_detail_get`")

        resource_path = '/api/secrets/secret-roles/{pk}/'.replace('{format}', 'json')
        path_params = {}
        if 'pk' in params:
            path_params['pk'] = params['pk']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SecretRoleSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def secret_role_list_get(self, **kwargs):
        """
        List all secret roles
        <p>List all secret roles</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.secret_role_list_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SecretRoleSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.secret_role_list_get_with_http_info(**kwargs)
        else:
            (data) = self.secret_role_list_get_with_http_info(**kwargs)
            return data

    def secret_role_list_get_with_http_info(self, **kwargs):
        """
        List all secret roles
        <p>List all secret roles</p>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.secret_role_list_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: SecretRoleSerializer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method secret_role_list_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/api/secrets/secret-roles/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='SecretRoleSerializer',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
