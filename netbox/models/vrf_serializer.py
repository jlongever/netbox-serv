# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VRFSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, rd=None, tenant=None, enforce_unique=None, description=None):
        """
        VRFSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'rd': 'str',
            'tenant': 'TenantNestedSerializer',
            'enforce_unique': 'bool',
            'description': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'rd': 'rd',
            'tenant': 'tenant',
            'enforce_unique': 'enforce_unique',
            'description': 'description'
        }

        self._id = id
        self._name = name
        self._rd = rd
        self._tenant = tenant
        self._enforce_unique = enforce_unique
        self._description = description


    @property
    def id(self):
        """
        Gets the id of this VRFSerializer.


        :return: The id of this VRFSerializer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VRFSerializer.


        :param id: The id of this VRFSerializer.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this VRFSerializer.


        :return: The name of this VRFSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VRFSerializer.


        :param name: The name of this VRFSerializer.
        :type: str
        """

        self._name = name

    @property
    def rd(self):
        """
        Gets the rd of this VRFSerializer.


        :return: The rd of this VRFSerializer.
        :rtype: str
        """
        return self._rd

    @rd.setter
    def rd(self, rd):
        """
        Sets the rd of this VRFSerializer.


        :param rd: The rd of this VRFSerializer.
        :type: str
        """

        self._rd = rd

    @property
    def tenant(self):
        """
        Gets the tenant of this VRFSerializer.


        :return: The tenant of this VRFSerializer.
        :rtype: TenantNestedSerializer
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """
        Sets the tenant of this VRFSerializer.


        :param tenant: The tenant of this VRFSerializer.
        :type: TenantNestedSerializer
        """

        self._tenant = tenant

    @property
    def enforce_unique(self):
        """
        Gets the enforce_unique of this VRFSerializer.
        Prevent duplicate prefixes/IP addresses within this VRF

        :return: The enforce_unique of this VRFSerializer.
        :rtype: bool
        """
        return self._enforce_unique

    @enforce_unique.setter
    def enforce_unique(self, enforce_unique):
        """
        Sets the enforce_unique of this VRFSerializer.
        Prevent duplicate prefixes/IP addresses within this VRF

        :param enforce_unique: The enforce_unique of this VRFSerializer.
        :type: bool
        """

        self._enforce_unique = enforce_unique

    @property
    def description(self):
        """
        Gets the description of this VRFSerializer.


        :return: The description of this VRFSerializer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this VRFSerializer.


        :param description: The description of this VRFSerializer.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
