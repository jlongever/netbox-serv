# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VLANNestedSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, vid=None, name=None, display_name=None):
        """
        VLANNestedSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'vid': 'int',
            'name': 'str',
            'display_name': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'vid': 'vid',
            'name': 'name',
            'display_name': 'display_name'
        }

        self._id = id
        self._vid = vid
        self._name = name
        self._display_name = display_name


    @property
    def id(self):
        """
        Gets the id of this VLANNestedSerializer.


        :return: The id of this VLANNestedSerializer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VLANNestedSerializer.


        :param id: The id of this VLANNestedSerializer.
        :type: int
        """

        self._id = id

    @property
    def vid(self):
        """
        Gets the vid of this VLANNestedSerializer.


        :return: The vid of this VLANNestedSerializer.
        :rtype: int
        """
        return self._vid

    @vid.setter
    def vid(self, vid):
        """
        Sets the vid of this VLANNestedSerializer.


        :param vid: The vid of this VLANNestedSerializer.
        :type: int
        """

        if not vid:
            raise ValueError("Invalid value for `vid`, must not be `None`")
        if vid > 4094.0:
            raise ValueError("Invalid value for `vid`, must be a value less than or equal to `4094.0`")
        if vid < 1.0:
            raise ValueError("Invalid value for `vid`, must be a value greater than or equal to `1.0`")

        self._vid = vid

    @property
    def name(self):
        """
        Gets the name of this VLANNestedSerializer.


        :return: The name of this VLANNestedSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VLANNestedSerializer.


        :param name: The name of this VLANNestedSerializer.
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """
        Gets the display_name of this VLANNestedSerializer.


        :return: The display_name of this VLANNestedSerializer.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this VLANNestedSerializer.


        :param display_name: The display_name of this VLANNestedSerializer.
        :type: str
        """

        self._display_name = display_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
