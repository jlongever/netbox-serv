# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InterfaceDetailSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, device=None, name=None, form_factor=None, mac_address=None, mgmt_only=None, description=None, is_connected=None, connected_interface=None):
        """
        InterfaceDetailSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'device': 'DeviceNestedSerializer',
            'name': 'str',
            'form_factor': 'str',
            'mac_address': 'str',
            'mgmt_only': 'bool',
            'description': 'str',
            'is_connected': 'str',
            'connected_interface': 'InterfaceSerializer'
        }

        self.attribute_map = {
            'id': 'id',
            'device': 'device',
            'name': 'name',
            'form_factor': 'form_factor',
            'mac_address': 'mac_address',
            'mgmt_only': 'mgmt_only',
            'description': 'description',
            'is_connected': 'is_connected',
            'connected_interface': 'connected_interface'
        }

        self._id = id
        self._device = device
        self._name = name
        self._form_factor = form_factor
        self._mac_address = mac_address
        self._mgmt_only = mgmt_only
        self._description = description
        self._is_connected = is_connected
        self._connected_interface = connected_interface


    @property
    def id(self):
        """
        Gets the id of this InterfaceDetailSerializer.


        :return: The id of this InterfaceDetailSerializer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InterfaceDetailSerializer.


        :param id: The id of this InterfaceDetailSerializer.
        :type: int
        """

        self._id = id

    @property
    def device(self):
        """
        Gets the device of this InterfaceDetailSerializer.


        :return: The device of this InterfaceDetailSerializer.
        :rtype: DeviceNestedSerializer
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this InterfaceDetailSerializer.


        :param device: The device of this InterfaceDetailSerializer.
        :type: DeviceNestedSerializer
        """

        self._device = device

    @property
    def name(self):
        """
        Gets the name of this InterfaceDetailSerializer.


        :return: The name of this InterfaceDetailSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InterfaceDetailSerializer.


        :param name: The name of this InterfaceDetailSerializer.
        :type: str
        """

        self._name = name

    @property
    def form_factor(self):
        """
        Gets the form_factor of this InterfaceDetailSerializer.


        :return: The form_factor of this InterfaceDetailSerializer.
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """
        Sets the form_factor of this InterfaceDetailSerializer.


        :param form_factor: The form_factor of this InterfaceDetailSerializer.
        :type: str
        """

        self._form_factor = form_factor

    @property
    def mac_address(self):
        """
        Gets the mac_address of this InterfaceDetailSerializer.


        :return: The mac_address of this InterfaceDetailSerializer.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this InterfaceDetailSerializer.


        :param mac_address: The mac_address of this InterfaceDetailSerializer.
        :type: str
        """

        self._mac_address = mac_address

    @property
    def mgmt_only(self):
        """
        Gets the mgmt_only of this InterfaceDetailSerializer.
        This interface is used only for out-of-band management

        :return: The mgmt_only of this InterfaceDetailSerializer.
        :rtype: bool
        """
        return self._mgmt_only

    @mgmt_only.setter
    def mgmt_only(self, mgmt_only):
        """
        Sets the mgmt_only of this InterfaceDetailSerializer.
        This interface is used only for out-of-band management

        :param mgmt_only: The mgmt_only of this InterfaceDetailSerializer.
        :type: bool
        """

        self._mgmt_only = mgmt_only

    @property
    def description(self):
        """
        Gets the description of this InterfaceDetailSerializer.


        :return: The description of this InterfaceDetailSerializer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InterfaceDetailSerializer.


        :param description: The description of this InterfaceDetailSerializer.
        :type: str
        """

        self._description = description

    @property
    def is_connected(self):
        """
        Gets the is_connected of this InterfaceDetailSerializer.


        :return: The is_connected of this InterfaceDetailSerializer.
        :rtype: str
        """
        return self._is_connected

    @is_connected.setter
    def is_connected(self, is_connected):
        """
        Sets the is_connected of this InterfaceDetailSerializer.


        :param is_connected: The is_connected of this InterfaceDetailSerializer.
        :type: str
        """

        self._is_connected = is_connected

    @property
    def connected_interface(self):
        """
        Gets the connected_interface of this InterfaceDetailSerializer.


        :return: The connected_interface of this InterfaceDetailSerializer.
        :rtype: InterfaceSerializer
        """
        return self._connected_interface

    @connected_interface.setter
    def connected_interface(self, connected_interface):
        """
        Sets the connected_interface of this InterfaceDetailSerializer.


        :param connected_interface: The connected_interface of this InterfaceDetailSerializer.
        :type: InterfaceSerializer
        """

        self._connected_interface = connected_interface

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
