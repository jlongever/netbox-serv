# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WriteVLANSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, site=None, group=None, vid=None, name=None, tenant=None, status=None, role=None, description=None):
        """
        WriteVLANSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'site': 'SiteNestedSerializer',
            'group': 'VLANGroupNestedSerializer',
            'vid': 'int',
            'name': 'str',
            'tenant': 'TenantNestedSerializer',
            'status': 'int',
            'role': 'RoleNestedSerializer',
            'description': 'str'
        }

        self.attribute_map = {
            'site': 'site',
            'group': 'group',
            'vid': 'vid',
            'name': 'name',
            'tenant': 'tenant',
            'status': 'status',
            'role': 'role',
            'description': 'description'
        }

        self._site = site
        self._group = group
        self._vid = vid
        self._name = name
        self._tenant = tenant
        self._status = status
        self._role = role
        self._description = description


    @property
    def site(self):
        """
        Gets the site of this WriteVLANSerializer.


        :return: The site of this WriteVLANSerializer.
        :rtype: SiteNestedSerializer
        """
        return self._site

    @site.setter
    def site(self, site):
        """
        Sets the site of this WriteVLANSerializer.


        :param site: The site of this WriteVLANSerializer.
        :type: SiteNestedSerializer
        """

        self._site = site

    @property
    def group(self):
        """
        Gets the group of this WriteVLANSerializer.


        :return: The group of this WriteVLANSerializer.
        :rtype: VLANGroupNestedSerializer
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this WriteVLANSerializer.


        :param group: The group of this WriteVLANSerializer.
        :type: VLANGroupNestedSerializer
        """

        self._group = group

    @property
    def vid(self):
        """
        Gets the vid of this WriteVLANSerializer.


        :return: The vid of this WriteVLANSerializer.
        :rtype: int
        """
        return self._vid

    @vid.setter
    def vid(self, vid):
        """
        Sets the vid of this WriteVLANSerializer.


        :param vid: The vid of this WriteVLANSerializer.
        :type: int
        """

        if not vid:
            raise ValueError("Invalid value for `vid`, must not be `None`")
        if vid > 4094.0:
            raise ValueError("Invalid value for `vid`, must be a value less than or equal to `4094.0`")
        if vid < 1.0:
            raise ValueError("Invalid value for `vid`, must be a value greater than or equal to `1.0`")

        self._vid = vid

    @property
    def name(self):
        """
        Gets the name of this WriteVLANSerializer.


        :return: The name of this WriteVLANSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WriteVLANSerializer.


        :param name: The name of this WriteVLANSerializer.
        :type: str
        """

        self._name = name

    @property
    def tenant(self):
        """
        Gets the tenant of this WriteVLANSerializer.


        :return: The tenant of this WriteVLANSerializer.
        :rtype: TenantNestedSerializer
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """
        Sets the tenant of this WriteVLANSerializer.


        :param tenant: The tenant of this WriteVLANSerializer.
        :type: TenantNestedSerializer
        """

        self._tenant = tenant

    @property
    def status(self):
        """
        Gets the status of this WriteVLANSerializer.


        :return: The status of this WriteVLANSerializer.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this WriteVLANSerializer.


        :param status: The status of this WriteVLANSerializer.
        :type: int
        """
        allowed_values = ["1", "2", "3"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def role(self):
        """
        Gets the role of this WriteVLANSerializer.


        :return: The role of this WriteVLANSerializer.
        :rtype: RoleNestedSerializer
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this WriteVLANSerializer.


        :param role: The role of this WriteVLANSerializer.
        :type: RoleNestedSerializer
        """

        self._role = role

    @property
    def description(self):
        """
        Gets the description of this WriteVLANSerializer.


        :return: The description of this WriteVLANSerializer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this WriteVLANSerializer.


        :param description: The description of this WriteVLANSerializer.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
