# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WriteDeviceSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, device_type=None, device_role=None, tenant=None, platform=None, serial=None, asset_tag=None, rack=None, position=None, face=None, status=None, primary_ip=None, primary_ip4=None, primary_ip6=None, comments=None):
        """
        WriteDeviceSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'device_type': 'DeviceTypeNestedSerializer',
            'device_role': 'DeviceRoleNestedSerializer',
            'tenant': 'TenantNestedSerializer',
            'platform': 'PlatformNestedSerializer',
            'serial': 'str',
            'asset_tag': 'str',
            'rack': 'RackNestedSerializer',
            'position': 'int',
            'face': 'int',
            'status': 'bool',
            'primary_ip': 'DeviceIPAddressNestedSerializer',
            'primary_ip4': 'DeviceIPAddressNestedSerializer',
            'primary_ip6': 'DeviceIPAddressNestedSerializer',
            'comments': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'device_type': 'device_type',
            'device_role': 'device_role',
            'tenant': 'tenant',
            'platform': 'platform',
            'serial': 'serial',
            'asset_tag': 'asset_tag',
            'rack': 'rack',
            'position': 'position',
            'face': 'face',
            'status': 'status',
            'primary_ip': 'primary_ip',
            'primary_ip4': 'primary_ip4',
            'primary_ip6': 'primary_ip6',
            'comments': 'comments'
        }

        self._name = name
        self._device_type = device_type
        self._device_role = device_role
        self._tenant = tenant
        self._platform = platform
        self._serial = serial
        self._asset_tag = asset_tag
        self._rack = rack
        self._position = position
        self._face = face
        self._status = status
        self._primary_ip = primary_ip
        self._primary_ip4 = primary_ip4
        self._primary_ip6 = primary_ip6
        self._comments = comments


    @property
    def name(self):
        """
        Gets the name of this WriteDeviceSerializer.


        :return: The name of this WriteDeviceSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WriteDeviceSerializer.


        :param name: The name of this WriteDeviceSerializer.
        :type: str
        """

        self._name = name

    @property
    def device_type(self):
        """
        Gets the device_type of this WriteDeviceSerializer.


        :return: The device_type of this WriteDeviceSerializer.
        :rtype: DeviceTypeNestedSerializer
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """
        Sets the device_type of this WriteDeviceSerializer.


        :param device_type: The device_type of this WriteDeviceSerializer.
        :type: DeviceTypeNestedSerializer
        """

        self._device_type = device_type

    @property
    def device_role(self):
        """
        Gets the device_role of this WriteDeviceSerializer.


        :return: The device_role of this WriteDeviceSerializer.
        :rtype: DeviceRoleNestedSerializer
        """
        return self._device_role

    @device_role.setter
    def device_role(self, device_role):
        """
        Sets the device_role of this WriteDeviceSerializer.


        :param device_role: The device_role of this WriteDeviceSerializer.
        :type: DeviceRoleNestedSerializer
        """

        self._device_role = device_role

    @property
    def tenant(self):
        """
        Gets the tenant of this WriteDeviceSerializer.


        :return: The tenant of this WriteDeviceSerializer.
        :rtype: TenantNestedSerializer
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """
        Sets the tenant of this WriteDeviceSerializer.


        :param tenant: The tenant of this WriteDeviceSerializer.
        :type: TenantNestedSerializer
        """

        self._tenant = tenant

    @property
    def platform(self):
        """
        Gets the platform of this WriteDeviceSerializer.


        :return: The platform of this WriteDeviceSerializer.
        :rtype: PlatformNestedSerializer
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """
        Sets the platform of this WriteDeviceSerializer.


        :param platform: The platform of this WriteDeviceSerializer.
        :type: PlatformNestedSerializer
        """

        self._platform = platform

    @property
    def serial(self):
        """
        Gets the serial of this WriteDeviceSerializer.


        :return: The serial of this WriteDeviceSerializer.
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """
        Sets the serial of this WriteDeviceSerializer.


        :param serial: The serial of this WriteDeviceSerializer.
        :type: str
        """

        self._serial = serial

    @property
    def asset_tag(self):
        """
        Gets the asset_tag of this WriteDeviceSerializer.
        A unique tag used to identify this device

        :return: The asset_tag of this WriteDeviceSerializer.
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """
        Sets the asset_tag of this WriteDeviceSerializer.
        A unique tag used to identify this device

        :param asset_tag: The asset_tag of this WriteDeviceSerializer.
        :type: str
        """

        self._asset_tag = asset_tag

    @property
    def rack(self):
        """
        Gets the rack of this WriteDeviceSerializer.


        :return: The rack of this WriteDeviceSerializer.
        :rtype: RackNestedSerializer
        """
        return self._rack

    @rack.setter
    def rack(self, rack):
        """
        Sets the rack of this WriteDeviceSerializer.


        :param rack: The rack of this WriteDeviceSerializer.
        :type: RackNestedSerializer
        """

        self._rack = rack

    @property
    def position(self):
        """
        Gets the position of this WriteDeviceSerializer.
        Number of the lowest U position occupied by the device

        :return: The position of this WriteDeviceSerializer.
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this WriteDeviceSerializer.
        Number of the lowest U position occupied by the device

        :param position: The position of this WriteDeviceSerializer.
        :type: int
        """

        if not position:
            raise ValueError("Invalid value for `position`, must not be `None`")
        if position > 32767.0:
            raise ValueError("Invalid value for `position`, must be a value less than or equal to `32767.0`")
        if position < 1.0:
            raise ValueError("Invalid value for `position`, must be a value greater than or equal to `1.0`")

        self._position = position

    @property
    def face(self):
        """
        Gets the face of this WriteDeviceSerializer.


        :return: The face of this WriteDeviceSerializer.
        :rtype: int
        """
        return self._face

    @face.setter
    def face(self, face):
        """
        Sets the face of this WriteDeviceSerializer.


        :param face: The face of this WriteDeviceSerializer.
        :type: int
        """
        allowed_values = ["0", "1"]
        if face not in allowed_values:
            raise ValueError(
                "Invalid value for `face` ({0}), must be one of {1}"
                .format(face, allowed_values)
            )

        self._face = face

    @property
    def status(self):
        """
        Gets the status of this WriteDeviceSerializer.


        :return: The status of this WriteDeviceSerializer.
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this WriteDeviceSerializer.


        :param status: The status of this WriteDeviceSerializer.
        :type: bool
        """

        self._status = status

    @property
    def primary_ip(self):
        """
        Gets the primary_ip of this WriteDeviceSerializer.


        :return: The primary_ip of this WriteDeviceSerializer.
        :rtype: DeviceIPAddressNestedSerializer
        """
        return self._primary_ip

    @primary_ip.setter
    def primary_ip(self, primary_ip):
        """
        Sets the primary_ip of this WriteDeviceSerializer.


        :param primary_ip: The primary_ip of this WriteDeviceSerializer.
        :type: DeviceIPAddressNestedSerializer
        """

        self._primary_ip = primary_ip

    @property
    def primary_ip4(self):
        """
        Gets the primary_ip4 of this WriteDeviceSerializer.


        :return: The primary_ip4 of this WriteDeviceSerializer.
        :rtype: DeviceIPAddressNestedSerializer
        """
        return self._primary_ip4

    @primary_ip4.setter
    def primary_ip4(self, primary_ip4):
        """
        Sets the primary_ip4 of this WriteDeviceSerializer.


        :param primary_ip4: The primary_ip4 of this WriteDeviceSerializer.
        :type: DeviceIPAddressNestedSerializer
        """

        self._primary_ip4 = primary_ip4

    @property
    def primary_ip6(self):
        """
        Gets the primary_ip6 of this WriteDeviceSerializer.


        :return: The primary_ip6 of this WriteDeviceSerializer.
        :rtype: DeviceIPAddressNestedSerializer
        """
        return self._primary_ip6

    @primary_ip6.setter
    def primary_ip6(self, primary_ip6):
        """
        Sets the primary_ip6 of this WriteDeviceSerializer.


        :param primary_ip6: The primary_ip6 of this WriteDeviceSerializer.
        :type: DeviceIPAddressNestedSerializer
        """

        self._primary_ip6 = primary_ip6

    @property
    def comments(self):
        """
        Gets the comments of this WriteDeviceSerializer.


        :return: The comments of this WriteDeviceSerializer.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this WriteDeviceSerializer.


        :param comments: The comments of this WriteDeviceSerializer.
        :type: str
        """

        self._comments = comments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
