# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WritePowerPortSerializer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, device=None, name=None, power_outlet=None, connection_status=None):
        """
        WritePowerPortSerializer - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device': 'DeviceNestedSerializer',
            'name': 'str',
            'power_outlet': 'PowerOutletNestedSerializer',
            'connection_status': 'bool'
        }

        self.attribute_map = {
            'device': 'device',
            'name': 'name',
            'power_outlet': 'power_outlet',
            'connection_status': 'connection_status'
        }

        self._device = device
        self._name = name
        self._power_outlet = power_outlet
        self._connection_status = connection_status


    @property
    def device(self):
        """
        Gets the device of this WritePowerPortSerializer.


        :return: The device of this WritePowerPortSerializer.
        :rtype: DeviceNestedSerializer
        """
        return self._device

    @device.setter
    def device(self, device):
        """
        Sets the device of this WritePowerPortSerializer.


        :param device: The device of this WritePowerPortSerializer.
        :type: DeviceNestedSerializer
        """

        self._device = device

    @property
    def name(self):
        """
        Gets the name of this WritePowerPortSerializer.


        :return: The name of this WritePowerPortSerializer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WritePowerPortSerializer.


        :param name: The name of this WritePowerPortSerializer.
        :type: str
        """

        self._name = name

    @property
    def power_outlet(self):
        """
        Gets the power_outlet of this WritePowerPortSerializer.


        :return: The power_outlet of this WritePowerPortSerializer.
        :rtype: PowerOutletNestedSerializer
        """
        return self._power_outlet

    @power_outlet.setter
    def power_outlet(self, power_outlet):
        """
        Sets the power_outlet of this WritePowerPortSerializer.


        :param power_outlet: The power_outlet of this WritePowerPortSerializer.
        :type: PowerOutletNestedSerializer
        """

        self._power_outlet = power_outlet

    @property
    def connection_status(self):
        """
        Gets the connection_status of this WritePowerPortSerializer.


        :return: The connection_status of this WritePowerPortSerializer.
        :rtype: bool
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """
        Sets the connection_status of this WritePowerPortSerializer.


        :param connection_status: The connection_status of this WritePowerPortSerializer.
        :type: bool
        """

        self._connection_status = connection_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
